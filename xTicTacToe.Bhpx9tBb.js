import{d as c,_ as g,c as o,a,b as i,F as h,h as d,t as p,o as r,p as f,e as y}from"./xindex.nwv0rKjI.js";const b=c({name:"tic-tac-toe",components:{},data(){return{game:{board:void 0,turn:0,next:void 0,gameover:!1,winner:null},player1:{},player2:{},log:void 0,destroying:!1,timeout:null}},beforeUnmount(){this.destroying=!0,this.timeout&&clearTimeout(this.timeout)},mounted(){this.reset()},methods:{reset(){this.game={board:[[" "," "," "],[" "," "," "],[" "," "," "]],turn:0,next:this.getRandomOption("x","o"),winner:null,gameover:!1},this.player1={name:"player1",happiness:0,piece:"o",record:[]},this.player2={name:"player2",happiness:0,piece:"x",record:[]},this.log=[]},playForever(){this.reset(),this.play(),this.destroying||(this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(this.playForever,1e3))},play(){for(;!this.game.gameover;)this.playOne(this.player1,this.getBetterAction),this.playOne(this.player2,this.getRandomAction)},playOne(e,n){const t=n(e),s=this.applyAction(t,e);this.analyse(t,e,s),this.log.push({player:e.name,action:t,feedback:s})},analyse(e,n,t){n.record.push({action:e,feedback:t})},getRandomOption(...e){return e[~~(Math.random()*e.length)]},getBetterAction(e){return this.game.next!==e.piece?{action:"wait"}:this.game.board[1][1]===" "?{action:"place",piece:e.piece,x:1,y:1}:this.getRandomAction()},getRandomAction(){const e=this.getRandomOption("wait","place");if(e==="place"){const n=this.getRandomOption("o","x"),t=this.getRandomOption(0,1,2),s=this.getRandomOption(0,1,2);return{action:e,piece:n,x:t,y:s}}return{action:e}},getFeedback(e,n){let t=0;return n.piece!==e.piece?e.action==="wait"?t+=10:t-=100:e.action==="place"&&(e.piece!==this.game.next||this.game.board[e.y][e.x]!==" "?t-=100:t+=10),t},isGameWon(){const e=this.game.board;return e[0][0]!==" "&&e[0][0]===e[0][1]&&e[0][1]===e[0][2]||e[1][0]!==" "&&e[1][0]===e[1][1]&&e[1][1]===e[1][2]||e[2][0]!==" "&&e[2][0]===e[2][1]&&e[2][1]===e[2][2]||e[0][0]!==" "&&e[0][0]===e[1][0]&&e[1][0]===e[2][0]||e[0][1]!==" "&&e[0][1]===e[1][1]&&e[1][1]===e[2][1]||e[0][2]!==" "&&e[0][2]===e[1][2]&&e[1][2]===e[2][2]||e[0][0]!==" "&&e[0][0]===e[1][1]&&e[1][1]===e[2][2]||e[0][2]!==" "&&e[0][2]===e[1][1]&&e[1][1]===e[2][0]},applyAction(e,n){let t=this.getFeedback(e,n);return t>0&&e.action==="place"&&(this.game.board[e.y][e.x]=e.piece,this.game.next=this.game.next==="o"?"x":"o",this.game.turn+=1,this.game.turn===9&&(this.game.gameover=!0),this.isGameWon()&&(this.game.gameover=!0,this.game.winner=n.name,t+=1e4)),n.happiness+=t,t}}}),m=e=>(f("data-v-7fe8fdde"),e=e(),y(),e),v=m(()=>i("h1",null,"tic-tac-toe",-1)),k=m(()=>i("p",null,`
      A game of noughts and crosses the program plays itself with random moves
      without knowing the rules of the game. It gets feedback and the move is
      applied only. What would the game need to do learn how to win given only
      this feedback?
    `,-1)),w={class:"board"};function x(e,n,t,s,_,O){return r(),o("section",null,[v,a(),k,a(),i("div",w,[i("table",null,[(r(!0),o(h,null,d(e.game.board,l=>(r(),o("tr",{key:l.$id},[(r(!0),o(h,null,d(l,u=>(r(),o("td",{key:u.$id},[i("span",null,p(u),1)]))),128))]))),128))])]),a(),i("button",{type:"button",onClick:n[0]||(n[0]=(...l)=>e.playForever&&e.playForever(...l))},"Play"),a(),i("p",null,[a(`
      Player1 `),i("strong",null,p(e.player1.happiness),1)]),a(),i("p",null,[a(`
      Player2 `),i("strong",null,p(e.player2.happiness),1)])])}const A=g(b,[["render",x],["__scopeId","data-v-7fe8fdde"]]);export{A as default};
